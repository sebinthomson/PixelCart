<!DOCTYPE HTML>
<html>
<body>
	<div class="colorlib-loader"></div>
	<div id="page">
		{{>userHeader}}
		<div style="display: inline-flex;">
			<div style="padding-top: 5rem ;">
				<div class="container">
					<div class="row">
						{{>userFilter}}
					</div>
				</div>
			</div>
			<div>

				<div class="colorlib-intro">
					<div class="container">
						<div class="row">
							<div class="col-sm-12 text-center">
								<h2 class="intro">Save your Memories, Record your Actions,</h2>
								<h2 class="intro">Survive with Surveillance</h2>
							</div>
						</div>
					</div>
				</div>
				<div
					style="padding-left:55rem;">
					<div>
						<p style="margin-bottom: 0rem;"><strong>Sort By</strong></p>
						<select class="sort-control-input">
							<option value="NA" data-sort="NA">Newest Arrivals</option>
							<option value="LH" data-sort="LH">Price: Low to High</option>
							<option value="HL" data-sort="HL">Price: High to Low</option>
						</select>
					</div>
				</div>
				<div>
					<div class="colorlib-product">
						<div class="container">
							<div class="row row-pb-md">
								{{#each products}}
								<div class="col-lg-4 mb-4 text-center">
									<a href="/productdetails?proId={{this._id}}">
										<div class="product-entry border">
											<figure> <img src="/product-images/{{this._id}}0.jpg" alt="product-image"
													style="width: 210px; height: 250px;">
											</figure>
											<div class="desc">
												<figcaption>{{this.name}}</figcaption>
												<figcaption>{{formatPrice this.price}}</figcaption>
											</div>
										</div>
									</a>
								</div>
								{{/each}}
							</div>
						</div>
					</div>
				</div>
				<div class="col-lg-12">
					<div class="paginationhome" style="display: flex; justify-content: center;">
						<ul class="unlist" style="list-style: none; padding: 0; margin: 0; display: flex; align-items: center;">
							{{#if (gt currentPage 1)}}
							<li style="margin-right: 10px;"><a href="/home?page={{sub currentPage 1}}"><button
										class="btn mb-2 btn-secondary">Previous</button></a></li>
							{{/if}}

							{{#each pages}}
							{{#if (eq this ../currentPage)}}
							<li style="margin-right: 10px;" class="active"><a href="#"><button type="button"
										class="btn mb-2 btn-primary">{{this}}</button></a></li>
							{{else}}
							<li style="margin-right: 10px;"><a href="/home?page={{this}}"><button type="button"
										class="btn mb-2 btn-secondary">{{this}}</button></a></li>
							{{/if}}
							{{/each}}

							{{#if (lt currentPage totalPages)}}
							<li style="margin-right: 10px;"><a href="/home?page={{add currentPage 1}}"><button
										class="btn mb-2 btn-secondary">Next</button></a></li>
							{{/if}}
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.20/dist/sweetalert2.all.min.js"></script>
	<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.20/dist/sweetalert2.min.css" rel="stylesheet">
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const productBrand = new Set();
			const productColor = new Set();
			const productRange = new Set();
			const productCategory = new Set();
			let sort;
			let search
			let page
			let pb = []
			let pc = []
			let pr = []
			let pcategory = []
			function brandAddOrRemoveValue(value) {
				if (productBrand.has(value)) {
					productBrand.delete(value);
				} else {
					productBrand.add(value);
				}
			}
			function colorAddOrRemoveValue(value) {
				if (productColor.has(value)) {
					productColor.delete(value);
				} else {
					productColor.add(value);
				}
			}
			function rangeAddOrRemoveValue(value) {
				if (productRange.has(value)) {
					productRange.delete(value);
				} else {
					productRange.add(value);
				}
			}
			function categoryAddOrRemoveValue(value) {
				if (productCategory.has(value)) {
					productCategory.delete(value);
				} else {
					productCategory.add(value);
				}
			}
			const categoryButtons = document.querySelectorAll('.category-control-input');
			const brandButtons = document.querySelectorAll('.brand-control-input');
			const colorButtons = document.querySelectorAll('.color-control-input');
			const priceButtons = document.querySelectorAll('.price-control-input');
			const selectElement = document.querySelector('.sort-control-input');
			const searchInput = document.getElementById("searchInput");
			const searchButton = document.getElementById("searchButton");
			search = searchInput.value;
			const paginationButtons = document.querySelectorAll('.pagination-button');
			const productsContainer = document.querySelector('.colorlib-product .container .row.row-pb-md');
			const paginationContainer = document.querySelector('.paginationhome .unlist');
			categoryButtons.forEach(button => {
				button.addEventListener('change', async () => {
					const category = button.getAttribute('data-category');
					categoryAddOrRemoveValue(category)
					pcategory = [...productCategory]
					$.ajax({
						url: '/filterProduct',
						data: {
							productBrand: pb,
							productColor: pc,
							productRange: pr,
							productCategory: pcategory,
							sort: sort,
							search: search,
							page: page
						},
						method: 'post',
						success: (response) => {
							if (response.noProducts) {
								Swal.fire({
									title: 'No Matching Products',
									confirmButtonText: 'OK',
									confirmButtonColor: '#88c8bc',
								}).then((result) => {
									if (result.isConfirmed) {
										window.location.href = '/home'
									}
								});
							} else {
								updateProducts(response.products);
								updatePagination(response.currentPage, response.totalPages, response.pages)
							}
						}
					})
				});
			});
			brandButtons.forEach(button => {
				button.addEventListener('change', async () => {
					const brand = button.getAttribute('data-brand');
					brandAddOrRemoveValue(brand)
					pb = [...productBrand]
					$.ajax({
						url: '/filterProduct',
						data: {
							productBrand: pb,
							productColor: pc,
							productRange: pr,
							productCategory: pcategory,
							sort: sort,
							search: search,
							page: page
						},
						method: 'post',
						success: (response) => {
							if (response.noProducts) {
								Swal.fire({
									title: 'No Matching Products',
									confirmButtonText: 'OK',
									confirmButtonColor: '#88c8bc',
								}).then((result) => {
									if (result.isConfirmed) {
										window.location.href = '/home'
									}
								});
							} else {
								updateProducts(response.products);
								updatePagination(response.currentPage, response.totalPages, response.pages)
							}
						}
					})
				});
			});
			colorButtons.forEach(button => {
				button.addEventListener('change', async () => {
					const color = button.getAttribute('data-color');
					colorAddOrRemoveValue(color)
					pc = [...productColor]
					$.ajax({
						url: '/filterProduct',
						data: {
							productBrand: pb,
							productColor: pc,
							productRange: pr,
							productCategory: pcategory,
							sort: sort,
							search: search,
							page: page
						},
						method: 'post',
						success: (response) => {
							if (response.noProducts) {
								Swal.fire({
									title: 'No Matching Products',
									confirmButtonText: 'OK',
									confirmButtonColor: '#88c8bc',
								}).then((result) => {
									if (result.isConfirmed) {
										window.location.href = '/home'
									}
								});
							} else {
								updateProducts(response.products);
								updatePagination(response.currentPage, response.totalPages, response.pages)
							}
						}
					})
				});
			});
			priceButtons.forEach(button => {
				button.addEventListener('change', async () => {
					let price = button.getAttribute('data-range');
					rangeAddOrRemoveValue(price)
					pr = [...productRange]
					$.ajax({
						url: '/filterProduct',
						data: {
							productBrand: pb,
							productColor: pc,
							productRange: pr,
							productCategory: pcategory,
							sort: sort,
							search: search,
							page: page
						},
						method: 'post',
						success: (response) => {
							if (response.noProducts) {
								Swal.fire({
									title: 'No Matching Products',
									confirmButtonText: 'OK',
									confirmButtonColor: '#88c8bc',
								}).then((result) => {
									if (result.isConfirmed) {
										window.location.href = '/home'
									}
								});
							} else {
								updateProducts(response.products);
								updatePagination(response.currentPage, response.totalPages, response.pages)
							}
						}
					})
				});
			});
			selectElement.addEventListener('change', function () {
				const selectedIndex = this.selectedIndex;
				const selectedOption = this.options[selectedIndex];
				const sortValue = selectedOption.getAttribute('data-sort');
				sort = sortValue
				console.log(sort)
				$.ajax({
					url: '/filterProduct',
					data: {
						productBrand: pb,
						productColor: pc,
						productRange: pr,
						productCategory: pcategory,
						sort: sort,
						search: search,
						page: page
					},
					method: 'post',
					success: (response) => {
						if (response.noProducts) {
							Swal.fire({
								title: 'No Matching Products',
								confirmButtonText: 'OK',
								confirmButtonColor: '#88c8bc',
							});
						} else {
							updateProducts(response.products);
							updatePagination(response.currentPage, response.totalPages, response.pages)
						}
					}
				})
			});
			searchButton.addEventListener("click", function () {
				search = searchInput.value;
				$.ajax({
					url: '/filterProduct',
					data: {
						productBrand: pb,
						productColor: pc,
						productRange: pr,
						productCategory: pcategory,
						sort: sort,
						search: search,
						page: page
					},
					method: 'post',
					success: (response) => {
						if (response.noProducts) {
							Swal.fire({
								title: 'No Matching Products',
								confirmButtonText: 'OK',
								confirmButtonColor: '#88c8bc',
							}).then((result) => {
								if (result.isConfirmed) {
									window.location.href = '/home'
								}
							});
						} else {
							updateProducts(response.products);
							updatePagination(response.currentPage, response.totalPages, response.pages)
						}
					}
				})
			})
			paginationContainer.addEventListener('click', (event) => {
				const target = event.target;
				if (target.classList.contains('pagination-button')) {
					page = target.getAttribute('data-page');
					$.ajax({
						url: '/filterProduct',
						data: {
							productBrand: pb,
							productColor: pc,
							productRange: pr,
							productCategory: pcategory,
							sort: sort,
							search: search,
							page: page
						},
						method: 'post',
						success: (response) => {
							if (response.noProducts) {
								Swal.fire({
									title: 'No Matching Products',
									confirmButtonText: 'OK',
									confirmButtonColor: '#88c8bc',
								}).then((result) => {
									if (result.isConfirmed) {
										window.location.href = '/home'
									}
								});
							} else {
								updateProducts(response.products);
								updatePagination(response.currentPage, response.totalPages, response.pages)
							}
						}
					})
				}
			});
			function updateProducts(products) {
				productsContainer.innerHTML = ''; // Clear existing products
				products.forEach(product => {
					const productHtml = `
					<div class="col-lg-4 mb-4 text-center">
						<a href="/productdetails?proId=${product._id}">
							<div class="product-entry border">
								<figure> <img src="/product-images/${product._id}0.jpg" alt="product-image"
										style="width: 210px; height: 250px;">
								</figure>
								<div class="desc">
										<figcaption>${product.name}</figcaption>
										<figcaption>₹${product.price}</figcaption>	
								</div>
							</div>
						</a>
					</div>
				`;
					productsContainer.insertAdjacentHTML('beforeend', productHtml);
				});
			}
			function updatePagination(currentPage, totalPages, pages) {
				paginationContainer.innerHTML = '';
				let paginationHtml=''
				if (currentPage > 1) {
					paginationHtml += `
						<li style="margin-right: 10px;">
							<a>
								<button data-page="${currentPage - 1}" class="btn mb-2 btn-secondary pagination-button" id="paginationButton">Previous</button>
							</a>
						</li>
					`;
				}
				pages.forEach(page => {
					if (page === currentPage) {
						paginationHtml += `
							<li style="margin-right: 10px;" class="active">
								<a href="#">
									<button type="button" data-page="${page}" class="btn mb-2 btn-primary pagination-button">${page}</button>
								</a>
							</li>
						`;
					} else {
						paginationHtml += `
							<li style="margin-right: 10px;">
								<a >
									<button type="button" data-page="${page}" class="btn mb-2 btn-secondary pagination-button" id="paginationButton">${page}</button>
								</a>
							</li>
						`;
					}
				});
				if (currentPage < totalPages) {
					paginationHtml += `
						<li style="margin-right: 10px;">
							<a>
								<button data-page="${currentPage + 1}" class="btn mb-2 btn-secondary pagination-button" id="paginationButton">Next</button>
							</a>
						</li>
					`;
				}
				paginationContainer.insertAdjacentHTML('beforeend', paginationHtml);
			}
		});
	</script>
</body>

</html>